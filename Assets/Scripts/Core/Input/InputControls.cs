//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/Scripts/Core/Input/InputControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Main.Core.Input
{
    public partial class @InputControls : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @InputControls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputControls"",
    ""maps"": [
        {
            ""name"": ""CharacterControl"",
            ""id"": ""59702e91-e586-4dc6-8546-bece3fd79c62"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""409560df-8871-4bf2-a865-a63185c6266e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""3be9e383-0d49-459c-9af4-68cce5727afb"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""6b93f9cd-5e10-465b-8247-0c6ef6a20f81"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Focus"",
                    ""type"": ""Button"",
                    ""id"": ""56a7294a-b74c-46a7-81a6-417a853889a8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Crouch"",
                    ""type"": ""Button"",
                    ""id"": ""69edc1a3-9f3f-4864-9136-926a8d6ebc83"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Run"",
                    ""type"": ""Button"",
                    ""id"": ""56e86745-49cc-4d07-822a-9cc94ab94c67"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""672b8387-2c57-48e7-bc55-95ac2544b819"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad;PC"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""95258b0c-7b05-4bb4-bf6a-6c43741d1968"",
                    ""path"": ""<Gamepad>/rightStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad;PC"",
                    ""action"": ""Focus"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""246a1a56-a1be-4b64-aa8b-71a0441ec671"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad;PC"",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e4ad272f-0e96-466d-a230-df9926454209"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": ""AxisDeadzone"",
                    ""groups"": ""Gamepad;PC"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cf4319a7-856e-4655-a523-d87d547348c5"",
                    ""path"": ""<Gamepad>/leftStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC;Gamepad"",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1111158a-032a-4530-81cc-6dad0515dd95"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""4b074f2c-db11-4509-b6ea-de89676dbf27"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""2c54dc1b-610b-418b-ac77-f1e44a50cbd8"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""807d07bd-7683-4868-9aed-7c9967993920"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""9de0e00d-abb3-478d-951d-8455e49132fb"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""51636c8d-834f-4674-aaad-8973b96801de"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""7da83da0-38cf-401a-8535-b21dac00ce53"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6ae14f22-ee74-4fd7-b144-3074a1347048"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Focus"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""204791b7-5ece-4999-be80-7f4d8929de1b"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""295a59f6-9366-4cb5-aae7-2f8eb9d5637f"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC;Gamepad"",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dc1be6ef-ccea-4ac2-a73a-7e32c3f45241"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // CharacterControl
            m_CharacterControl = asset.FindActionMap("CharacterControl", throwIfNotFound: true);
            m_CharacterControl_Move = m_CharacterControl.FindAction("Move", throwIfNotFound: true);
            m_CharacterControl_Look = m_CharacterControl.FindAction("Look", throwIfNotFound: true);
            m_CharacterControl_Jump = m_CharacterControl.FindAction("Jump", throwIfNotFound: true);
            m_CharacterControl_Focus = m_CharacterControl.FindAction("Focus", throwIfNotFound: true);
            m_CharacterControl_Crouch = m_CharacterControl.FindAction("Crouch", throwIfNotFound: true);
            m_CharacterControl_Run = m_CharacterControl.FindAction("Run", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // CharacterControl
        private readonly InputActionMap m_CharacterControl;
        private ICharacterControlActions m_CharacterControlActionsCallbackInterface;
        private readonly InputAction m_CharacterControl_Move;
        private readonly InputAction m_CharacterControl_Look;
        private readonly InputAction m_CharacterControl_Jump;
        private readonly InputAction m_CharacterControl_Focus;
        private readonly InputAction m_CharacterControl_Crouch;
        private readonly InputAction m_CharacterControl_Run;
        public struct CharacterControlActions
        {
            private @InputControls m_Wrapper;
            public CharacterControlActions(@InputControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Move => m_Wrapper.m_CharacterControl_Move;
            public InputAction @Look => m_Wrapper.m_CharacterControl_Look;
            public InputAction @Jump => m_Wrapper.m_CharacterControl_Jump;
            public InputAction @Focus => m_Wrapper.m_CharacterControl_Focus;
            public InputAction @Crouch => m_Wrapper.m_CharacterControl_Crouch;
            public InputAction @Run => m_Wrapper.m_CharacterControl_Run;
            public InputActionMap Get() { return m_Wrapper.m_CharacterControl; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(CharacterControlActions set) { return set.Get(); }
            public void SetCallbacks(ICharacterControlActions instance)
            {
                if (m_Wrapper.m_CharacterControlActionsCallbackInterface != null)
                {
                    @Move.started -= m_Wrapper.m_CharacterControlActionsCallbackInterface.DoMove;
                    @Move.performed -= m_Wrapper.m_CharacterControlActionsCallbackInterface.DoMove;
                    @Move.canceled -= m_Wrapper.m_CharacterControlActionsCallbackInterface.DoMove;
                    @Look.started -= m_Wrapper.m_CharacterControlActionsCallbackInterface.DoLook;
                    @Look.performed -= m_Wrapper.m_CharacterControlActionsCallbackInterface.DoLook;
                    @Look.canceled -= m_Wrapper.m_CharacterControlActionsCallbackInterface.DoLook;
                    @Jump.started -= m_Wrapper.m_CharacterControlActionsCallbackInterface.DoJump;
                    @Jump.performed -= m_Wrapper.m_CharacterControlActionsCallbackInterface.DoJump;
                    @Jump.canceled -= m_Wrapper.m_CharacterControlActionsCallbackInterface.DoJump;
                    @Focus.started -= m_Wrapper.m_CharacterControlActionsCallbackInterface.DoFocus;
                    @Focus.performed -= m_Wrapper.m_CharacterControlActionsCallbackInterface.DoFocus;
                    @Focus.canceled -= m_Wrapper.m_CharacterControlActionsCallbackInterface.DoFocus;
                    @Crouch.started -= m_Wrapper.m_CharacterControlActionsCallbackInterface.DoCrouch;
                    @Crouch.performed -= m_Wrapper.m_CharacterControlActionsCallbackInterface.DoCrouch;
                    @Crouch.canceled -= m_Wrapper.m_CharacterControlActionsCallbackInterface.DoCrouch;
                    @Run.started -= m_Wrapper.m_CharacterControlActionsCallbackInterface.DoRun;
                    @Run.performed -= m_Wrapper.m_CharacterControlActionsCallbackInterface.DoRun;
                    @Run.canceled -= m_Wrapper.m_CharacterControlActionsCallbackInterface.DoRun;
                }
                m_Wrapper.m_CharacterControlActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Move.started += instance.DoMove;
                    @Move.performed += instance.DoMove;
                    @Move.canceled += instance.DoMove;
                    @Look.started += instance.DoLook;
                    @Look.performed += instance.DoLook;
                    @Look.canceled += instance.DoLook;
                    @Jump.started += instance.DoJump;
                    @Jump.performed += instance.DoJump;
                    @Jump.canceled += instance.DoJump;
                    @Focus.started += instance.DoFocus;
                    @Focus.performed += instance.DoFocus;
                    @Focus.canceled += instance.DoFocus;
                    @Crouch.started += instance.DoCrouch;
                    @Crouch.performed += instance.DoCrouch;
                    @Crouch.canceled += instance.DoCrouch;
                    @Run.started += instance.DoRun;
                    @Run.performed += instance.DoRun;
                    @Run.canceled += instance.DoRun;
                }
            }
        }
        public CharacterControlActions @CharacterControl => new CharacterControlActions(this);
        public interface ICharacterControlActions
        {
            void DoMove(InputAction.CallbackContext context);
            void DoLook(InputAction.CallbackContext context);
            void DoJump(InputAction.CallbackContext context);
            void DoFocus(InputAction.CallbackContext context);
            void DoCrouch(InputAction.CallbackContext context);
            void DoRun(InputAction.CallbackContext context);
        }
    }
}
